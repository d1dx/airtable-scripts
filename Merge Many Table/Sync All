// Utility Functions
const initAuthHeader = (token) => ({
    "Authorization": `Bearer ${token}`,
    "Content-Type": "application/json"
});

const fetchJSON = async (url, options) => {
    const response = await fetch(url, options);
    return await response.json();
};

const batchOperate = async (operationFunc, data, errorHandler = null, batchSize = 50) => {
    for (let i = 0; i < data.length; i += batchSize) {
        const batch = data.slice(i, i + batchSize);
        try {
            await operationFunc(batch);
        } catch (error) {
            console.log(`Error batch: ${JSON.stringify(batch)}`);  // Log the batch that caused the error
            if (errorHandler) {
                errorHandler(error);
            } else {
                throw new Error(`Failed to execute batch operation: ${error}`);
            }
        }
    }
};


// API Operations
const fetchBaseSchema = async (baseId, token) => {
    const url = `https://api.airtable.com/v0/meta/bases/${baseId}/tables`;
    const headers = initAuthHeader(token);
    return fetchJSON(url, { method: 'GET', headers });
};

const fetchTableRecords = async (tableId, base) => {
    const table = base.getTable(tableId);
    const records = await table.selectRecordsAsync();
    return records.records;
};

// Record Operations
const extractFieldValue = (value) => {
    if (!value) return null;
    return value.name || value.url || value;
};

const prepareRecords = (records, existingMap, schemaFields) => {
    const toUpdate = [];
    const toCreate = [];
    const allSourceRecordIds = new Set();
    
    records.forEach(record => {
        const existingRecord = existingMap.get(record.id);
        
        if (existingRecord) {
            const fieldsToUpdate = {};
            schemaFields.forEach(field => {
                const fieldName = field.name;
                fieldsToUpdate[fieldName] = extractFieldValue(record.getCellValue(fieldName));
            });
            toUpdate.push({ id: existingRecord.id, fields: fieldsToUpdate });
        } else {
            const fieldsToCreate = { "-Source Record ID-": record.id };
            schemaFields.forEach(field => {
                const fieldName = field.name;
                fieldsToCreate[fieldName] = extractFieldValue(record.getCellValue(fieldName));
            });
            toCreate.push({ fields: fieldsToCreate });
        }
        allSourceRecordIds.add(record.id);
    });

    const toDelete = Array.from(existingMap.keys()).filter(id => !allSourceRecordIds.has(id));
    
    return { toUpdate, toCreate, toDelete };
};

// Main Function
const main = async () => {
    const config = input.config();
    const nonSyncedTables = new Set(config.nonSyncedTables.split(","));
    const token = 'YOUR-AIRTABLE-PAT';
    const resultsTable = base.getTable('Results');
    
    let toUpdate = [];
    let toCreate = [];
    let allSourceRecordIds = new Set();

    const existingResultsRecords = await resultsTable.selectRecordsAsync();
    const existingMapByRecordID = new Map(existingResultsRecords.records.map(r => [r.id, r]));
    const existingMap = new Map(existingResultsRecords.records.map(r => [r.getCellValue("-Source Record ID-"), r]));
    
    const schema = await fetchBaseSchema(base.id, token);

    for (const table of schema.tables) {
        if (nonSyncedTables.has(table.name)) continue;
        
        const records = await fetchTableRecords(table.id, base);
        const { toUpdate: tableToUpdate, toCreate: tableToCreate, toDelete: tableToDelete } = prepareRecords(records, existingMap, table.fields);

        toUpdate = [...toUpdate, ...tableToUpdate];
        toCreate = [...toCreate, ...tableToCreate];
        allSourceRecordIds = new Set([...allSourceRecordIds, ...new Set(records.map(r => r.id))]);
    }

    // Create 'toDelete' array based on 'allSourceRecordIds' but use actual Airtable record IDs
    const toDelete = Array.from(existingMapByRecordID.keys()).filter(id => !allSourceRecordIds.has(existingMapByRecordID.get(id).getCellValue("-Source Record ID-")));

    await batchOperate(batch => resultsTable.createRecordsAsync(batch), toCreate);
    await batchOperate(batch => resultsTable.updateRecordsAsync(batch), toUpdate);
    await batchOperate(batch => resultsTable.deleteRecordsAsync(batch), toDelete);
    
    console.log("Sync complete.");
};

// Run Main Function
main();

